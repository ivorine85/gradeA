import java.io.*; 
import java.util.*; 

public class Testing extends Adjustments{

	public static void main(String[] args) throws Exception {
		/*
		// Load list of profiles
		//if (profileList
		Scanner scan_test = new Scanner(System.in).useLocale(Locale.US);  // Reading from System.in
		String answer = "null";
		String answer2 = "null";
		String action = "null";
		boolean valid = false;
		ArrayList<Profile> profileList = new ArrayList<Profile> (1);
		ArrayList<String> usernameList = new ArrayList<String> (1);

// Login Page
		System.out.println("Select Option");
		for (int i=0; i<usernameList.size();i++) {
			System.out.print((i+1) + ". ");
			System.out.println(usernameList.get(i));
		}
		System.out.print((usernameList.size()+1) + ". ");
		System.out.println("Create new user");
		System.out.print("choose: ");
		answer = scan_test.next();
		// If on login page won't need for GUI
		if (Integer.parseInt(answer) == (usernameList.size()+1)) {
			action = "newuser";
		} 
		
	//Create a new user
		if (action == "newuser") {
			//go to create new user page
			profileList.add(Createuser());
			usernameList.add(profileList.get(profileList.size()-1).getUsername());			
		}
		
		System.out.println(" ");
		System.out.println("Select Option");
		for (int i=0; i<usernameList.size();i++) {
			System.out.print((i+1) + ". ");
			System.out.println(usernameList.get(i));
		}
		System.out.print((usernameList.size()+1) + ". ");
		System.out.println("Create new user");
		System.out.print("choose: ");
		answer = scan_test.next();
		
	// Authentication of password for username
		if (Integer.parseInt(answer) != usernameList.size()+1) {
			System.out.println(usernameList.get(Integer.parseInt(answer)-1));
			System.out.print("Enter Password: ");
			answer2 = scan_test.next();
			valid = Checklogin(profileList.get(Integer.parseInt(answer)-1),answer2);
		}
		
		System.out.println(valid);
		
	// forgot password action
		profileList.set(0, Forgetpassword(profileList.get(0)));
		
// adding new course
		profileList.get(0).setCourses(<Course> Additem(profileList.get(0).getCourses(), new Course("Awesome Class")));
*/
		Hashtable<String, GradeBreakDown> courseBreakDown = new Hashtable();
		Hashtable<String, ArrayList<Student>> studentList = new Hashtable(0);
		Hashtable<String, ArrayList<GradeBreakDown>> assignmentBreakDown = new Hashtable(0);
		ArrayList<String> csvData = new ArrayList<String>(1);
		String assignType;
		String studentName;
		String studentEmail;
		String sid;
		String year;
		String type;
		String labSection;
		int tempNumAssign;
		int numCategories;
		int tempIndex;
		Student tempStudent;
		File file = new File("C:\\Users\\Albert Sze\\Google Drive\\Boston University\\CS591_Object_Oriented_Design_in_Java\\Project\\Github\\gradeA\\Albert_Sze\\Grade_A (1)\\GradeA\\src\\Excel_template_3.csv");
		
		ArrayList<Student> temp_studentList = new ArrayList<Student>(0);
		studentList.put("undergrad", temp_studentList);
		studentList.put("grad", temp_studentList);		
		
		//Read CSV file in
		BufferedReader br = new BufferedReader(new FileReader(file));
		
		String st;
		while ((st = br.readLine()) != null) {
			csvData.add(st);
		}
		// split the first two  3 rows
		csvData.set(0, csvData.get(0).substring(6));
		csvData.set(2, csvData.get(2).substring(6));
		//csvData.set(3, csvData.get(3).substring(1));
		for (int i = 0; i < csvData.size(); i++) {
 			System.out.println(csvData.get(i));
		}
		System.out.println("");
		// split the rows by comma delimiters.
		String[] assignments = csvData.get(0).split(",,");
		for (int i = 0; i < assignments.length; i++) {
			assignments[i] = assignments[i].toLowerCase();
		}
		String[] assignmentDetails = csvData.get(2).split(",");

		//Assign grade break downs
		for (int i = 0; i < assignments.length;i++) {
			assignType = assignments[i].substring(0, assignments[i].indexOf("_"));

			if (!courseBreakDown.containsKey(assignType)) {
				courseBreakDown.put(assignType, new GradeBreakDown(assignType,0.0,0.0,0,0,0.0,1));
				ArrayList<GradeBreakDown> temp = new ArrayList<GradeBreakDown>(0);
				assignmentBreakDown.put(assignType,temp);
			}
			else {
				tempNumAssign = courseBreakDown.get(assignType).getNumAssign();
				courseBreakDown.get(assignType).setNumAssign(tempNumAssign+1);
			}			
			assignmentBreakDown.get(assignType).add(new GradeBreakDown(assignType, Double.parseDouble(assignmentDetails[(2*i)+1].substring(0, assignmentDetails[(2*i)+1].length()-1))/100.0, Double.parseDouble(assignmentDetails[(2*i)+1].substring(0, assignmentDetails[(2*i)+1].length()-1))/100.0, 0, Integer.parseInt(assignmentDetails[2*i]),0.0, 1));
			
			if (assignType.toLowerCase().equals("project")) {
				for (int j = 1; j < 4; j++) {
					double percent = assignmentBreakDown.get(assignType).get(assignmentBreakDown.get(assignType).size()-1).getUndergradAssignPercent();
					int totalPts = assignmentBreakDown.get(assignType).get(assignmentBreakDown.get(assignType).size()-1).getTotalPoints();
					percent += Double.parseDouble(assignmentDetails[(2*(i+j))+1].substring(0, assignmentDetails[(2*(i+j))+1].length()-1))/100.0;
					totalPts += Integer.parseInt(assignmentDetails[2*(i+j)]);
					assignmentBreakDown.get(assignType).get(assignmentBreakDown.get(assignType).size()-1).setUndergradAssignPercent(percent);
					assignmentBreakDown.get(assignType).get(assignmentBreakDown.get(assignType).size()-1).setGradAssignPercent(percent);
					assignmentBreakDown.get(assignType).get(assignmentBreakDown.get(assignType).size()-1).setTotalPoints(totalPts);
				}
				i += 3  ;
			}
		}
		numCategories = courseBreakDown.size();
		
		for (Map.Entry<String, ArrayList<GradeBreakDown>> entry : assignmentBreakDown.entrySet()) {
			System.out.print(entry.getKey() + ": ");
			courseBreakDown.get(entry.getKey()).setUndergradAssignPercent(100.0/numCategories);
			courseBreakDown.get(entry.getKey()).setGradAssignPercent(100.0/numCategories);
			System.out.println(courseBreakDown.get(entry.getKey()).getGradAssignPercent());
			for (int i = 0; i < entry.getValue().size();i++) {
				System.out.print(entry.getValue().get(i).getAssignType() + i + ": ");
				System.out.print(entry.getValue().get(i).getGradAssignPercent()+"    ");
				System.out.println(entry.getValue().get(i).getTotalPoints());
			}
			System.out.println(" ");
		}
		
		for (int i = 4;i < csvData.size() ; i++) {
			String[] tempStudentDetail = csvData.get(i).split(",");
			studentName = tempStudentDetail[0];
			studentEmail = tempStudentDetail[1];
			sid = tempStudentDetail[2];
			year = tempStudentDetail[3];
			type = tempStudentDetail[4];
			labSection = tempStudentDetail[5];
			studentList.get(type.toLowerCase()).add(new Student(studentName,sid,type,Integer.parseInt(year),studentEmail,0));
			tempIndex = studentList.get(type.toLowerCase()).size()-1;
			
			for (int j = 0; j < assignments.length; j++) {
				assignType = assignments[j].substring(0, assignments[j].indexOf("_"));
				studentList.get(type.toLowerCase()).get(tempIndex).getCourseWork().add(new Assignment (assignType,  Integer.parseInt(tempStudentDetail[j*2+6]), Integer.parseInt(assignmentDetails[j*2]), 0));
			}
		}
		
		for (Map.Entry<String, ArrayList<Student>> entry : studentList.entrySet()) {
			System.out.print(entry.getKey() + ": ");
			for (int i = 0; i < entry.getValue().size(); i++) {
				System.out.println(                       );
			}
		}
		
	}

}
